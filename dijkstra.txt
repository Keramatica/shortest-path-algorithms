import heapq

# Define the graph using adjacency list (directed, weight = first number of each tuple)
graph = {
    1: {3: 15, 5: 8, 2: 11},
    2: {1: 7, 5: 10},
    3: {4: 11},
    4: {3: 11, 2: 20},
    5: {3: 5, 4: 14, 2: 11}
}

def dijkstra(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    priority_queue = [(0, start)]

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        for neighbor, weight in graph.get(current_node, {}).items():
            distance = current_distance + weight
            if distance < distances.get(neighbor, float('inf')):
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances

# Test from node 1
start_node = 1
shortest_paths = dijkstra(graph, start_node)

# Display results
print(f"Shortest distances from node {start_node}:")
for node, dist in sorted(shortest_paths.items()):
    print(f"Node {node}: {dist}")