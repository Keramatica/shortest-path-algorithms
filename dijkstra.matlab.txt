clc;
clear;

% Define the graph as an adjacency matrix (weights: first value in each pair)
% Nodes: 1 to 5
% Use inf for no direct edge
graph = [ ...
    0    11   15   inf   8;   % from node 1
    7    0    inf  inf   10;  % from node 2
    inf inf   0    11   inf;  % from node 3
    inf 20   11   0    inf;   % from node 4
    inf 11   5    14    0];   % from node 5

% Starting node
start_node = 1;

% Run Dijkstra's algorithm
distances = dijkstra(graph, start_node);

% Display the shortest distances
fprintf('Shortest distances from node %d:\n', start_node);
for i = 1:length(distances)
    fprintf('Node %d: %d\n', i, distances(i));
end

% -------------------------------
% Dijkstra's Algorithm Function
% -------------------------------
function dist = dijkstra(graph, start_node)
    n = size(graph, 1);
    visited = false(1, n);
    dist = inf(1, n);
    dist(start_node) = 0;

    for i = 1:n
        % Find the unvisited node with the smallest distance
        minDist = inf;
        u = -1;
        for j = 1:n
            if ~visited(j) && dist(j) < minDist
                minDist = dist(j);
                u = j;
            end
        end

        if u == -1
            break;
        end

        visited(u) = true;

        % Update distances to neighbors
        for v = 1:n
            if graph(u,v) ~= inf && ~visited(v)
                if dist(u) + graph(u,v) < dist(v)
                    dist(v) = dist(u) + graph(u,v);
                end
            end
        end
    end
end
